<?php

declare(strict_types=1);

namespace Jostkleigrewe\OpenAiCoreBundle\Dto\Client\Core;

use Symfony\Component\Serializer\Annotation;

/**
 * A message comprising the conversation
 *
 * @link https://platform.openai.com/docs/api-reference/completions/create
 */
class Message
{
    public const ROLE_SYSTEM = 'system';
    public const ROLE_USER = 'user';
    public const ROLE_ASSISTENT = 'assistant';
    public const ROLE_FUNCTION = 'function';

    /**
     * The contents of the message. content is required for all messages,
     * and may be null for assistant messages with function calls.
     *
     * @var string|null $content
     * @Annotation\SerializedName("content")
     */
    public ?string $content;

    /**
     * The name and arguments of a function that should be called, as generated by the model.
     *
     * @var FunctionCall|null $function_call
     * @Annotation\SerializedName("function_call")
     */
    public ?FunctionCall $function_call;

    /**
     * The name of the author of this message. name is required if role is function, and it
     * should be the name of the function whose response is in the content. May contain
     * a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
     *
     * @var string|null $name
     * @Annotation\SerializedName("name")
     */
    public ?string $name;

    /**
     * The role of the messages author. One of system, user, assistant, or function.
     *
     * @var string $role
     * @Annotation\SerializedName("role")
     */
    public string $role;

    /**
     * @param string|null $content
     * @param FunctionCall|null $function_call
     * @param string|null $name
     * @param string $role
     */
    public function __construct(
        string $role,
        ?string $content = null,
        ?FunctionCall $function_call = null,
        ?string $name = null,
        )
    {
        $this->content = $content;
        $this->function_call = $function_call;
        $this->name = $name;
        $this->role = $role;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(?string $content): Message
    {
        $this->content = $content;
        return $this;
    }

    public function getFunctionCall(): ?FunctionCall
    {
        return $this->function_call;
    }

    public function setFunctionCall(?FunctionCall $function_call): Message
    {
        $this->function_call = $function_call;
        return $this;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(?string $name): Message
    {
        $this->name = $name;
        return $this;
    }

    public function getRole(): string
    {
        return $this->role;
    }

    public function setRole(string $role): Message
    {
        $this->role = $role;
        return $this;
    }
}